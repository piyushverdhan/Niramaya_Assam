// Enhanced AMRIT CHO Performance Analytics Dashboard - 8 Coordinators Structure
// Copyright by DigiFacility Team-DPH_CoE

// Comprehensive Application Data with 8 Coordinators
const dashboardData = {
  metadata: {
    total_chos: 101,
    total_blocks: 4,
    total_facilities: 100,
    block_coordinators: 8,
    coordinators_per_block: 2,
    total_periods_analyzed: 4,
    date_range: "Beginning to Sep 4, 2025"
  },
  coordinator_block_mapping: {
    "KHARUPETIA": ["MOHIBUL ISLAM", "ABU KHAYER IFTIKAR"],
    "PATHARIGHAT": ["PRATAP RAJBONGSHI", "NIRANJAN SAHARIAH"], 
    "Sipajhar": ["BALODEV MEDHI", "MUNINDRA SALOI"],
    "JALJALI": ["SAGARIKA PRITY BARUAH", "PRIYANKA DAS"]
  },
  blocks: [
    {
      Block_Name: "KHARUPETIA",
      Coordinator_1: "MOHIBUL ISLAM", 
      Coordinator_2: "ABU KHAYER IFTIKAR",
      Total_CHOs: 34,
      Active_CHOs: 26,
      Activity_Rate_percent: 76.5,
      Total_OPD: 113,
      Total_ABHA: 5,
      Total_OPD_All_Periods: 841,
      Total_ABHA_All_Periods: 33,
      Average_Activity_Rate_percent: 75.0,
      color: "#a7f3d0",
      performance_level: "high"
    },
    {
      Block_Name: "JALJALI",
      Coordinator_1: "SAGARIKA PRITY BARUAH",
      Coordinator_2: "PRIYANKA DAS", 
      Total_CHOs: 23,
      Active_CHOs: 9,
      Activity_Rate_percent: 39.1,
      Total_OPD: 55,
      Total_ABHA: 0,
      Total_OPD_All_Periods: 395,
      Total_ABHA_All_Periods: 3,
      Average_Activity_Rate_percent: 53.1,
      color: "#fef3c7",
      performance_level: "medium"
    },
    {
      Block_Name: "Sipajhar",
      Coordinator_1: "BALODEV MEDHI",
      Coordinator_2: "MUNINDRA SALOI",
      Total_CHOs: 26,
      Active_CHOs: 10, 
      Activity_Rate_percent: 38.5,
      Total_OPD: 42,
      Total_ABHA: 0,
      Total_OPD_All_Periods: 231,
      Total_ABHA_All_Periods: 5,
      Average_Activity_Rate_percent: 47.2,
      color: "#fed7aa",
      performance_level: "low"
    },
    {
      Block_Name: "PATHARIGHAT",
      Coordinator_1: "PRATAP RAJBONGSHI",
      Coordinator_2: "NIRANJAN SAHARIAH",
      Total_CHOs: 17,
      Active_CHOs: 4,
      Activity_Rate_percent: 23.5,
      Total_OPD: 12,
      Total_ABHA: 0, 
      Total_OPD_All_Periods: 89,
      Total_ABHA_All_Periods: 2,
      Average_Activity_Rate_percent: 32.3,
      color: "#fecaca",
      performance_level: "critical"
    }
  ],
  coordinators: [
    {
      name: "MUNINDRA SALOI",
      block: "Sipajhar",
      total_chos_supervised: 11,
      average_activity_rate: 79.4,
      total_opd_all_periods: 182,
      total_abha_all_periods: 0,
      performance_category: "excellent",
      latest_active_chos: 8,
      latest_inactive_chos: 3,
      latest_activity_rate: 72.7
    },
    {
      name: "PRIYANKA DAS", 
      block: "JALJALI",
      total_chos_supervised: 10,
      average_activity_rate: 76.6,
      total_opd_all_periods: 219,
      total_abha_all_periods: 0,
      performance_category: "excellent",
      latest_active_chos: 7,
      latest_inactive_chos: 3,
      latest_activity_rate: 70.0
    },
    {
      name: "MOHIBUL ISLAM",
      block: "KHARUPETIA", 
      total_chos_supervised: 20,
      average_activity_rate: 75.6,
      total_opd_all_periods: 556,
      total_abha_all_periods: 23,
      performance_category: "excellent",
      latest_active_chos: 17,
      latest_inactive_chos: 3,
      latest_activity_rate: 85.0
    },
    {
      name: "ABU KHAYER IFTIKAR",
      block: "KHARUPETIA",
      total_chos_supervised: 14, 
      average_activity_rate: 73.8,
      total_opd_all_periods: 285,
      total_abha_all_periods: 10,
      performance_category: "excellent",
      latest_active_chos: 9,
      latest_inactive_chos: 5,
      latest_activity_rate: 64.3
    },
    {
      name: "NIRANJAN SAHARIAH",
      block: "PATHARIGHAT",
      total_chos_supervised: 6,
      average_activity_rate: 59.7,
      total_opd_all_periods: 62,
      total_abha_all_periods: 1,
      performance_category: "good",
      latest_active_chos: 4,
      latest_inactive_chos: 2,
      latest_activity_rate: 66.7
    },
    {
      name: "SAGARIKA PRITY BARUAH",
      block: "JALJALI",
      total_chos_supervised: 13,
      average_activity_rate: 34.2,
      total_opd_all_periods: 176,
      total_abha_all_periods: 3,
      performance_category: "needs_improvement",
      latest_active_chos: 2,
      latest_inactive_chos: 11,
      latest_activity_rate: 15.4
    },
    {
      name: "BALODEV MEDHI", 
      block: "Sipajhar",
      total_chos_supervised: 15,
      average_activity_rate: 24.2,
      total_opd_all_periods: 49,
      total_abha_all_periods: 5,
      performance_category: "needs_improvement",
      latest_active_chos: 2,
      latest_inactive_chos: 13,
      latest_activity_rate: 13.3
    },
    {
      name: "PRATAP RAJBONGSHI",
      block: "PATHARIGHAT",
      total_chos_supervised: 11,
      average_activity_rate: 17.9,
      total_opd_all_periods: 27,
      total_abha_all_periods: 1,
      performance_category: "critical_intervention",
      latest_active_chos: 0,
      latest_inactive_chos: 11,
      latest_activity_rate: 0.0
    }
  ],
  overall_trends: [
    {
      period: "Beginning to Aug 18",
      period_short: "Baseline",
      active_chos: 77,
      activity_rate: 76.2,
      total_opd: 854,
      total_abha: 23
    },
    {
      period: "Week 1 (Aug 14-20)",
      period_short: "Week 1",
      active_chos: 48,
      activity_rate: 47.5, 
      total_opd: 242,
      total_abha: 5
    },
    {
      period: "Week 2 (Aug 21-27)",
      period_short: "Week 2",
      active_chos: 50,
      activity_rate: 49.5,
      total_opd: 238,
      total_abha: 10
    },
    {
      period: "Week 3 (Aug 28-Sep 4)",
      period_short: "Week 3",
      active_chos: 49,
      activity_rate: 48.5,
      total_opd: 222,
      total_abha: 5
    }
  ],
  sample_chos: [
    { name: "Pranjali Borah", block: "KHARUPETIA", coordinator: "MOHIBUL ISLAM", facility: "Baruapara AAM", phone: "9876543210", email: "pranjali@health.gov.in", active: "Yes" },
    { name: "Begum Bhuyan", block: "JALJALI", coordinator: "SAGARIKA PRITY BARUAH", facility: "Badli Char AAM", phone: "9876543211", email: "begum@health.gov.in", active: "No" },
    { name: "Sabrina Sahin", block: "KHARUPETIA", coordinator: "ABU KHAYER IFTIKAR", facility: "Bhakatpara AAM", phone: "9876543212", email: "sabrina@health.gov.in", active: "Yes" },
    { name: "Shahin Sultana Ahmed", block: "KHARUPETIA", coordinator: "MOHIBUL ISLAM", facility: "Khokhjani AAM", phone: "9876543213", email: "shahin@health.gov.in", active: "Yes" },
    { name: "Yasmine Begum", block: "KHARUPETIA", coordinator: "ABU KHAYER IFTIKAR", facility: "Gelaidingi AAM", phone: "9876543214", email: "yasmine@health.gov.in", active: "No" },
    { name: "Abdul Rahman", block: "PATHARIGHAT", coordinator: "PRATAP RAJBONGSHI", facility: "Central PHC", phone: "9876543215", email: "abdul@health.gov.in", active: "No" },
    { name: "Munindra Das", block: "Sipajhar", coordinator: "MUNINDRA SALOI", facility: "Rural Health Center", phone: "9876543216", email: "munindra@health.gov.in", active: "Yes" },
    { name: "Priyanka Singh", block: "JALJALI", coordinator: "PRIYANKA DAS", facility: "Community Health Post", phone: "9876543217", email: "priyanka@health.gov.in", active: "Yes" }
  ]
};

// Global Variables
let currentTheme = 'cool';
let activeFilters = {
  block: 'all',
  coordinator: 'all',
  week: 'all',
  status: 'all'
};
let charts = {};

// Initialize Dashboard
document.addEventListener('DOMContentLoaded', function() {
  initializeDashboard();
  setupEventListeners();
  loadOverviewData();
  createWeeklyTrendsChart();
});

function initializeDashboard() {
  console.log('Initializing AMRIT Dashboard with 8 coordinators...');
  
  // Load saved theme
  const savedTheme = localStorage.getItem('amrit-theme') || 'cool';
  setColorTheme(savedTheme);
  
  // Populate dropdowns
  populateCoordinatorDropdowns();
  populateBlockDropdowns();
  
  // Initialize tab system
  initializeTabs();
  
  // Load default data
  loadBlockAnalysisData();
  loadCHODirectoryData();
  loadPerformanceMonitorData();
  loadAlertsData();
}

function setupEventListeners() {
  // Color temperature toggle
  document.getElementById('color-temp-toggle').addEventListener('click', toggleColorTheme);
  
  // Tab navigation
  document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.addEventListener('click', (e) => switchTab(e.target.dataset.tab));
  });
  
  // Active stats modal
  document.getElementById('active-stats-btn').addEventListener('click', openActiveStatsModal);
  
  // Filter controls
  document.getElementById('blockFilter')?.addEventListener('change', handleBlockFilter);
  document.getElementById('weekFilter')?.addEventListener('change', handleWeekFilter);
  document.getElementById('coordinatorFilter')?.addEventListener('change', handleCoordinatorFilter);
  document.getElementById('activityStatusFilter')?.addEventListener('change', handleStatusFilter);
  document.getElementById('monitorPeriod')?.addEventListener('change', handlePeriodFilter);
  
  // Search functionality
  document.getElementById('choSearch')?.addEventListener('input', handleCHOSearch);
  
  // Export functionality
  document.getElementById('exportCsv')?.addEventListener('click', exportToCsv);
  
  // Map interactions
  setupMapInteractions();
  
  // Modal close
  document.querySelectorAll('.close').forEach(closeBtn => {
    closeBtn.addEventListener('click', closeModal);
  });
  
  // Click outside modal to close
  window.addEventListener('click', (e) => {
    if (e.target.classList.contains('modal')) {
      closeModal();
    }
  });
}

function toggleColorTheme() {
  currentTheme = currentTheme === 'cool' ? 'warm' : 'cool';
  setColorTheme(currentTheme);
  localStorage.setItem('amrit-theme', currentTheme);
}

function setColorTheme(theme) {
  document.body.setAttribute('data-theme', theme);
  const toggleIcon = document.querySelector('.toggle-icon');
  if (toggleIcon) {
    toggleIcon.textContent = theme === 'cool' ? '🌙' : '☀️';
  }
  currentTheme = theme;
}

function initializeTabs() {
  const tabBtns = document.querySelectorAll('.tab-btn');
  const tabPanels = document.querySelectorAll('.tab-panel');
  
  // Show first tab by default
  tabBtns[0]?.classList.add('active');
  tabPanels[0]?.classList.add('active');
}

function switchTab(tabName) {
  // Update tab buttons
  document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.classList.toggle('active', btn.dataset.tab === tabName);
  });
  
  // Update tab panels
  document.querySelectorAll('.tab-panel').forEach(panel => {
    panel.classList.toggle('active', panel.id === tabName);
  });
  
  // Load tab-specific data
  switch(tabName) {
    case 'overview':
      loadOverviewData();
      createWeeklyTrendsChart();
      break;
    case 'block-analysis':
      loadBlockAnalysisData();
      break;
    case 'cho-directory':
      loadCHODirectoryData();
      break;
    case 'interactive-map':
      loadInteractiveMapData();
      break;
    case 'performance-monitor':
      loadPerformanceMonitorData();
      createPerformanceCharts();
      break;
    case 'alerts':
      loadAlertsData();
      break;
  }
}

function populateCoordinatorDropdowns() {
  const coordinatorSelects = document.querySelectorAll('#coordinatorFilter, #modalCoordinatorFilter');
  coordinatorSelects.forEach(select => {
    if (select) {
      // Clear existing options except "All"
      const allOption = select.querySelector('option[value="all"]');
      select.innerHTML = '';
      if (allOption) select.appendChild(allOption);
      
      // Add coordinator options
      dashboardData.coordinators.forEach(coord => {
        const option = document.createElement('option');
        option.value = coord.name;
        option.textContent = `${coord.name} (${coord.block})`;
        select.appendChild(option);
      });
    }
  });
}

function populateBlockDropdowns() {
  const blockSelects = document.querySelectorAll('#blockFilter, #modalBlockFilter');
  blockSelects.forEach(select => {
    if (select) {
      // Clear existing options except "All"
      const allOption = select.querySelector('option[value="all"]');
      select.innerHTML = '';
      if (allOption) select.appendChild(allOption);
      
      // Add block options
      dashboardData.blocks.forEach(block => {
        const option = document.createElement('option');
        option.value = block.Block_Name;
        option.textContent = `${block.Block_Name} (${block.Coordinator_1}, ${block.Coordinator_2})`;
        select.appendChild(option);
      });
    }
  });
}

function setupMapInteractions() {
  document.querySelectorAll('.block-area').forEach(area => {
    area.addEventListener('click', function() {
      const blockName = this.dataset.block;
      filterByBlock(blockName);
      
      // Visual feedback
      document.querySelectorAll('.block-area').forEach(a => a.classList.remove('selected'));
      this.classList.add('selected');
    });
    
    area.addEventListener('mouseenter', function() {
      showBlockTooltip(this);
    });
    
    area.addEventListener('mouseleave', function() {
      hideBlockTooltip();
    });
  });
}

function filterByBlock(blockName) {
  activeFilters.block = blockName;
  
  // Update all relevant dropdowns
  const blockSelects = document.querySelectorAll('#blockFilter, #modalBlockFilter');
  blockSelects.forEach(select => {
    if (select) select.value = blockName;
  });
  
  // Refresh all tabs with new filter
  refreshAllTabsData();
  
  // Switch to block analysis tab for detailed view
  switchTab('block-analysis');
}

function loadOverviewData() {
  // Update metrics cards with 8-coordinator structure
  updateMetricsCards();
  
  // Load coordinator summary
  loadCoordinatorsSummary();
  
  // Update map colors and interactions
  updateDistrictMap();
}

function updateMetricsCards() {
  // Metrics are already in HTML, could be updated dynamically here
  console.log('Metrics cards updated with 8-coordinator structure');
}

function loadCoordinatorsSummary() {
  // Coordinators summary is already in HTML template
  // Could be dynamically updated here based on filters
  console.log('8-coordinator summary loaded');
}

function updateDistrictMap() {
  // Update block colors based on performance
  dashboardData.blocks.forEach(block => {
    const blockElement = document.querySelector(`[data-block="${block.Block_Name}"]`);
    if (blockElement) {
      blockElement.style.fill = block.color;
    }
  });
}

function createWeeklyTrendsChart() {
  const ctx = document.getElementById('weeklyTrendsChart')?.getContext('2d');
  if (!ctx) return;
  
  if (charts.weeklyTrends) {
    charts.weeklyTrends.destroy();
  }
  
  const labels = dashboardData.overall_trends.map(trend => trend.period_short);
  const activityData = dashboardData.overall_trends.map(trend => trend.activity_rate);
  const opdData = dashboardData.overall_trends.map(trend => trend.total_opd);
  
  charts.weeklyTrends = new Chart(ctx, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [
        {
          label: 'Activity Rate (%)',
          data: activityData,
          borderColor: '#3b82f6',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          tension: 0.4,
          fill: true,
          yAxisID: 'y'
        },
        {
          label: 'OPD Registrations',
          data: opdData,
          borderColor: '#10b981',
          backgroundColor: 'rgba(16, 185, 129, 0.1)',
          tension: 0.4,
          fill: true,
          yAxisID: 'y1'
        }
      ]
    },
    options: {
      responsive: true,
      interaction: {
        mode: 'index',
        intersect: false,
      },
      scales: {
        x: {
          display: true,
          title: {
            display: true,
            text: 'Time Period'
          }
        },
        y: {
          type: 'linear',
          display: true,
          position: 'left',
          title: {
            display: true,
            text: 'Activity Rate (%)'
          },
        },
        y1: {
          type: 'linear',
          display: true,
          position: 'right',
          title: {
            display: true,
            text: 'OPD Registrations'
          },
          grid: {
            drawOnChartArea: false,
          },
        },
      },
      plugins: {
        title: {
          display: true,
          text: '8-Coordinator Performance Trends Across 4 Periods'
        },
        legend: {
          display: true
        }
      }
    }
  });
}

function loadBlockAnalysisData() {
  updateBlockComparisonTable();
  updateCoordinatorDetails();
}

function updateBlockComparisonTable() {
  const tbody = document.querySelector('#blockComparisonTable tbody');
  if (!tbody) return;
  
  tbody.innerHTML = '';
  
  let blocksToShow = dashboardData.blocks;
  if (activeFilters.block !== 'all') {
    blocksToShow = blocksToShow.filter(block => block.Block_Name === activeFilters.block);
  }
  
  blocksToShow.forEach(block => {
    const row = document.createElement('tr');
    
    const performanceClass = getPerformanceClass(block.Average_Activity_Rate_percent);
    row.className = performanceClass;
    
    row.innerHTML = `
      <td><strong>${block.Block_Name}</strong></td>
      <td>${block.Coordinator_1}</td>
      <td>${block.Coordinator_2}</td>
      <td>${block.Total_CHOs}</td>
      <td><span class="performance-badge ${performanceClass}">${block.Activity_Rate_percent}%</span></td>
      <td>${block.Total_OPD}</td>
      <td><span class="performance-level ${block.performance_level}">${block.performance_level.toUpperCase()}</span></td>
    `;
    
    row.addEventListener('click', () => {
      showBlockCoordinatorDetails(block);
    });
    
    tbody.appendChild(row);
  });
}

function showBlockCoordinatorDetails(block) {
  const detailsDiv = document.getElementById('coordinatorInfo');
  if (!detailsDiv) return;
  
  const coord1 = dashboardData.coordinators.find(c => c.name === block.Coordinator_1);
  const coord2 = dashboardData.coordinators.find(c => c.name === block.Coordinator_2);
  
  detailsDiv.innerHTML = `
    <div class="coordinator-comparison">
      <div class="coordinator-detail">
        <h4>${coord1.name}</h4>
        <p><strong>CHOs Supervised:</strong> ${coord1.total_chos_supervised}</p>
        <p><strong>Activity Rate:</strong> ${coord1.average_activity_rate}%</p>
        <p><strong>Total OPD:</strong> ${coord1.total_opd_all_periods}</p>
        <p><strong>Performance:</strong> <span class="${coord1.performance_category}">${coord1.performance_category.replace('_', ' ').toUpperCase()}</span></p>
      </div>
      <div class="coordinator-detail">
        <h4>${coord2.name}</h4>
        <p><strong>CHOs Supervised:</strong> ${coord2.total_chos_supervised}</p>
        <p><strong>Activity Rate:</strong> ${coord2.average_activity_rate}%</p>
        <p><strong>Total OPD:</strong> ${coord2.total_opd_all_periods}</p>
        <p><strong>Performance:</strong> <span class="${coord2.performance_category}">${coord2.performance_category.replace('_', ' ').toUpperCase()}</span></p>
      </div>
    </div>
    <div class="performance-gap">
      <h5>Performance Gap: ${Math.abs(coord1.average_activity_rate - coord2.average_activity_rate).toFixed(1)}%</h5>
      ${Math.abs(coord1.average_activity_rate - coord2.average_activity_rate) > 20 ? 
        '<p class="warning">⚠️ Large performance gap requires attention</p>' : 
        '<p class="good">✅ Performance gap within acceptable range</p>'
      }
    </div>
  `;
}

function loadCHODirectoryData() {
  populateCHOTable();
}

function populateCHOTable() {
  const tbody = document.querySelector('#choTable tbody');
  if (!tbody) return;
  
  tbody.innerHTML = '';
  
  let chosToShow = dashboardData.sample_chos;
  
  // Apply filters
  if (activeFilters.coordinator !== 'all') {
    chosToShow = chosToShow.filter(cho => cho.coordinator === activeFilters.coordinator);
  }
  if (activeFilters.block !== 'all') {
    chosToShow = chosToShow.filter(cho => cho.block === activeFilters.block);
  }
  if (activeFilters.status !== 'all') {
    chosToShow = chosToShow.filter(cho => cho.active === activeFilters.status);
  }
  
  chosToShow.forEach(cho => {
    const row = document.createElement('tr');
    
    if (cho.active === 'No') {
      row.classList.add('cho-inactive');
      row.title = 'Click to send mobile notification to use AMRIT app';
    }
    
    row.innerHTML = `
      <td><strong>${cho.name}</strong></td>
      <td>${cho.block}</td>
      <td>${cho.coordinator}</td>
      <td>${cho.facility}</td>
      <td>${cho.phone}<br><small>${cho.email}</small></td>
      <td><span class="status-badge ${cho.active.toLowerCase()}">${cho.active === 'Yes' ? 'Active' : 'Inactive'}</span></td>
      <td>
        ${cho.active === 'No' ? 
          '<button class="action-btn small" onclick="sendNotification(\'' + cho.name + '\')">Send Notification</button>' : 
          '<span class="text-muted">-</span>'
        }
      </td>
    `;
    
    tbody.appendChild(row);
  });
}

function loadPerformanceMonitorData() {
  updateCoordinatorRanking();
  loadKPICards();
}

function updateCoordinatorRanking() {
  const rankingDiv = document.getElementById('coordinatorRanking');
  if (!rankingDiv) return;
  
  // Sort coordinators by performance
  const sortedCoordinators = [...dashboardData.coordinators].sort((a, b) => 
    b.average_activity_rate - a.average_activity_rate
  );
  
  rankingDiv.innerHTML = '';
  
  sortedCoordinators.forEach((coord, index) => {
    const rankingItem = document.createElement('div');
    rankingItem.className = 'ranking-item';
    
    const performanceClass = getPerformanceCategoryClass(coord.performance_category);
    
    rankingItem.innerHTML = `
      <div class="ranking-position">${index + 1}</div>
      <div class="ranking-info">
        <div class="ranking-name">${coord.name}</div>
        <div class="ranking-details">${coord.block} Block • ${coord.total_chos_supervised} CHOs</div>
      </div>
      <div class="ranking-score ${performanceClass}">${coord.average_activity_rate}%</div>
    `;
    
    rankingDiv.appendChild(rankingItem);
  });
}

function loadKPICards() {
  // KPI cards are in HTML template, could be updated dynamically
  console.log('KPI cards loaded for 8-coordinator structure');
}

function createPerformanceCharts() {
  createPerformanceHeatmap();
  createInfrastructureChart();
}

function createPerformanceHeatmap() {
  const ctx = document.getElementById('performanceHeatmap')?.getContext('2d');
  if (!ctx) return;
  
  if (charts.heatmap) {
    charts.heatmap.destroy();
  }
  
  const blockNames = dashboardData.blocks.map(block => block.Block_Name);
  const activityRates = dashboardData.blocks.map(block => block.Average_Activity_Rate_percent);
  const colors = dashboardData.blocks.map(block => block.color);
  
  charts.heatmap = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: blockNames,
      datasets: [{
        label: 'Average Activity Rate (%)',
        data: activityRates,
        backgroundColor: colors,
        borderColor: colors.map(color => color.replace('0.3', '1')),
        borderWidth: 2
      }]
    },
    options: {
      responsive: true,
      plugins: {
        title: {
          display: true,
          text: 'Block Performance Heatmap (4 Blocks, 8 Coordinators)'
        },
        legend: {
          display: false
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          max: 100,
          title: {
            display: true,
            text: 'Activity Rate (%)'
          }
        },
        x: {
          title: {
            display: true,
            text: 'Blocks'
          }
        }
      }
    }
  });
}

function createInfrastructureChart() {
  const ctx = document.getElementById('infrastructureChart')?.getContext('2d');
  if (!ctx) return;
  
  if (charts.infrastructure) {
    charts.infrastructure.destroy();
  }
  
  // Mock infrastructure data
  const infrastructureData = {
    labels: ['CHO Availability', 'Facility Functionality', 'Supervision Effectiveness', 'Technology Readiness'],
    datasets: [{
      label: 'Readiness Score (%)',
      data: [78, 65, 72, 45],
      backgroundColor: [
        'rgba(34, 197, 94, 0.6)',
        'rgba(245, 158, 11, 0.6)',
        'rgba(59, 130, 246, 0.6)',
        'rgba(239, 68, 68, 0.6)'
      ],
      borderColor: [
        'rgba(34, 197, 94, 1)',
        'rgba(245, 158, 11, 1)',
        'rgba(59, 130, 246, 1)',
        'rgba(239, 68, 68, 1)'
      ],
      borderWidth: 2
    }]
  };
  
  charts.infrastructure = new Chart(ctx, {
    type: 'radar',
    data: infrastructureData,
    options: {
      responsive: true,
      plugins: {
        title: {
          display: true,
          text: 'Infrastructure Readiness Assessment'
        }
      },
      scales: {
        r: {
          beginAtZero: true,
          max: 100
        }
      }
    }
  });
}

function loadAlertsData() {
  // Alerts are in HTML template, could be updated dynamically
  console.log('Alerts loaded for 8-coordinator monitoring');
}

function openActiveStatsModal() {
  const modal = document.getElementById('activeStatsModal');
  if (modal) {
    modal.style.display = 'block';
    loadActiveStatsData();
  }
}

function loadActiveStatsData() {
  const activeList = document.getElementById('activeCHOsList');
  const inactiveList = document.getElementById('inactiveCHOsList');
  
  if (!activeList || !inactiveList) return;
  
  const activeCHOs = dashboardData.sample_chos.filter(cho => cho.active === 'Yes');
  const inactiveCHOs = dashboardData.sample_chos.filter(cho => cho.active === 'No');
  
  activeList.innerHTML = '';
  activeCHOs.forEach(cho => {
    const item = document.createElement('div');
    item.className = 'cho-item';
    item.innerHTML = `
      <strong>${cho.name}</strong><br>
      <small>${cho.block} - ${cho.coordinator}</small>
    `;
    activeList.appendChild(item);
  });
  
  inactiveList.innerHTML = '';
  inactiveCHOs.forEach(cho => {
    const item = document.createElement('div');
    item.className = 'cho-item inactive';
    item.innerHTML = `
      <strong>${cho.name}</strong><br>
      <small>${cho.block} - ${cho.coordinator}</small><br>
      <button class="action-btn small" onclick="sendNotification('${cho.name}')">Notify</button>
    `;
    inactiveList.appendChild(item);
  });
}

function closeModal() {
  const modals = document.querySelectorAll('.modal');
  modals.forEach(modal => {
    modal.style.display = 'none';
  });
}

// Event Handlers
function handleBlockFilter(event) {
  activeFilters.block = event.target.value;
  refreshCurrentTab();
}

function handleWeekFilter(event) {
  activeFilters.week = event.target.value;
  refreshCurrentTab();
}

function handleCoordinatorFilter(event) {
  activeFilters.coordinator = event.target.value;
  refreshCurrentTab();
}

function handleStatusFilter(event) {
  activeFilters.status = event.target.value;
  refreshCurrentTab();
}

function handlePeriodFilter(event) {
  activeFilters.period = event.target.value;
  refreshCurrentTab();
}

function handleCHOSearch(event) {
  const searchTerm = event.target.value.toLowerCase();
  filterCHOTable(searchTerm);
}

function filterCHOTable(searchTerm) {
  const rows = document.querySelectorAll('#choTable tbody tr');
  rows.forEach(row => {
    const text = row.textContent.toLowerCase();
    row.style.display = text.includes(searchTerm) ? '' : 'none';
  });
}

function refreshCurrentTab() {
  const activeTab = document.querySelector('.tab-panel.active')?.id;
  if (activeTab) {
    switchTab(activeTab);
  }
}

function refreshAllTabsData() {
  // Refresh data for all tabs when filters change
  loadOverviewData();
  loadBlockAnalysisData();
  loadCHODirectoryData();
  loadPerformanceMonitorData();
}

// Helper Functions
function getPerformanceClass(rate) {
  if (rate >= 70) return 'excellent';
  if (rate >= 50) return 'good';
  if (rate >= 30) return 'needs-improvement';
  return 'critical';
}

function getPerformanceCategoryClass(category) {
  switch(category) {
    case 'excellent': return 'excellent';
    case 'good': return 'good';
    case 'needs_improvement': return 'needs-improvement';
    case 'critical_intervention': return 'critical';
    default: return 'needs-improvement';
  }
}

function showBlockTooltip(element) {
  const blockName = element.dataset.block;
  const block = dashboardData.blocks.find(b => b.Block_Name === blockName);
  if (!block) return;
  
  const tooltip = document.createElement('div');
  tooltip.className = 'block-tooltip';
  tooltip.innerHTML = `
    <strong>${block.Block_Name}</strong><br>
    Coordinators: ${block.Coordinator_1}, ${block.Coordinator_2}<br>
    Activity Rate: ${block.Activity_Rate_percent}%<br>
    CHOs: ${block.Total_CHOs} | OPD: ${block.Total_OPD}
  `;
  
  document.body.appendChild(tooltip);
  
  // Position tooltip
  const rect = element.getBoundingClientRect();
  tooltip.style.position = 'absolute';
  tooltip.style.left = (rect.left + rect.width / 2) + 'px';
  tooltip.style.top = (rect.top - 10) + 'px';
  tooltip.style.transform = 'translateX(-50%) translateY(-100%)';
  tooltip.style.zIndex = '1000';
  tooltip.style.background = 'rgba(0,0,0,0.8)';
  tooltip.style.color = 'white';
  tooltip.style.padding = '8px 12px';
  tooltip.style.borderRadius = '6px';
  tooltip.style.fontSize = '12px';
  tooltip.style.pointerEvents = 'none';
}

function hideBlockTooltip() {
  const tooltips = document.querySelectorAll('.block-tooltip');
  tooltips.forEach(tooltip => tooltip.remove());
}

function exportToCsv() {
  const data = dashboardData.sample_chos.filter(cho => {
    if (activeFilters.coordinator !== 'all' && cho.coordinator !== activeFilters.coordinator) return false;
    if (activeFilters.block !== 'all' && cho.block !== activeFilters.block) return false;
    if (activeFilters.status !== 'all' && cho.active !== activeFilters.status) return false;
    return true;
  });
  
  const csv = convertToCSV(data);
  downloadCSV(csv, 'amrit-cho-directory.csv');
}

function convertToCSV(data) {
  const headers = ['Name', 'Block', 'Coordinator', 'Facility', 'Phone', 'Email', 'Status'];
  const rows = data.map(cho => [
    cho.name,
    cho.block,
    cho.coordinator,
    cho.facility,
    cho.phone,
    cho.email,
    cho.active
  ]);
  
  return [headers, ...rows].map(row => 
    row.map(field => `"${field}"`).join(',')
  ).join('\n');
}

function downloadCSV(csv, filename) {
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

function sendNotification(choName) {
  // Mock notification function
  alert(`Notification sent to ${choName} to use AMRIT application for CHO duties.`);
  console.log(`Mobile notification sent to CHO: ${choName}`);
}

// Initialize when DOM is loaded
console.log('AMRIT Dashboard JavaScript loaded - 8 Coordinators Enhanced Version');
console.log('Copyright by DigiFacility Team-DPH_CoE');
